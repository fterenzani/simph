<?php

require_once dirname(__FILE__).'/../../../lib/Simph/Router.php';

class TestArgs
{
    function getA() {
        return 'b';
    }
}

class TestRouter extends Simph_Router
{
    function redirect () {
        throw new TestRouterException;
    }
}

class TestRouterException extends Exception {}

/**
 * Test class for Simph_Router.
 * Generated by PHPUnit on 2011-08-29 at 22:54:10.
 */
class Simph_RouterTest extends PHPUnit_Framework_TestCase {
    /**
     * @var Simph_Router
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = $r = new Simph_Router;

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }


    public function testDef() {
        $this->assertEquals($this->object,
                $this->object->def('something', '.+'), 'def() return $this');
    }

    public function testRoute() {

        $this->assertInstanceOf('Simph_Router_Route',
                $this->object->route('/something', 'some.php'),
                'router() return a router');

        // Check for preg_quote
        $this->object->route('/subPa[ttern/([:a)', 'some.php');
        $this->object->match('/subPa[ttern');

    }

    public function testMatchRequest() {
        $_SERVER['REQUEST_URI'] = $this->object->web . 'a?hello=world';
        $this->assertEquals('a.php', $this->object->matchRequest());

        $_SERVER['REQUEST_URI'] = $this->object->web . 'b';
        $this->assertEquals('b.php', $this->object->matchRequest());

        $_SERVER['REQUEST_URI'] = $this->object->web;
        $this->assertEquals('index.php', $this->object->matchRequest());
        
    }

    public function testMatch() {

        $_GET = array();
        $this->object->route('/test_var_regex/:var', 'test/regex.php');
        $this->object->match('/test_var_regex/123');
        $this->assertEquals(array('var' => '123'), $_GET);

        $_GET = array();
        // set up some routes
        $this->object
            ->def('id', '[a-z]+')
            ->def('page', '\d', '1');

        // inherited param definitions
        $this->object->route('/default/:id', 'default/show.php');
        $path = $this->object->match('/default/abc');
        $this->assertEquals('default/show.php', $path);
        $this->assertEquals(array('id' => 'abc', 'page' => '1'), $_GET);

        $_GET = array();
        // ovverite a definition
        $this->object->route('/custom/:id', 'custom/show.php')
            ->def('id', '\d+');
        $path = $this->object->match('/default/123');
        $this->assertEquals('default/123.php', $path);
        
        $_GET = array();
        $path = $this->object->match('/custom/123');
        $this->assertEquals('custom/show.php', $path);
        $this->assertEquals(array('id' => '123', 'page' => '1'), $_GET);

        $_GET = array();
        // undefined params (it use a default regex)
        $this->object->route('/undefined/:undefined', 'undefined/show.php');
        $path = $this->object->match('/undefined/abc-123_');
        $this->assertEquals('undefined/show.php', $path);
        $this->assertEquals(array('undefined' => 'abc-123_', 'page' => '1'), $_GET);

        $_GET = array();
        // w/o params
        $this->object->route('/a', 'b.php');
        $path = $this->object->match('/a');
        $this->assertEquals('b.php', $path);
        $this->assertEquals(array('page' => '1'), $_GET);

        $_GET = array();
        // optional params
        $this->object->route('/c(/page-:page)', 'c.php');
        $path = $this->object->match('/c/page-2');
        $this->assertEquals('c.php', $path);
        $this->assertEquals(array('page' => '2'), $_GET);

        $_GET = array();
        $path = $this->object->match('/c');

        $this->assertEquals('c.php', $path);
        $this->assertEquals(array('page' => '1'), $_GET);

        // null byte filter
        $path = $this->object->match("/config.ini\0");
        $this->assertEquals('config.ini.php', $path);



    }

    public function testRedirect_a() {
        $_SERVER['HTTP_HOST'] = 'local';
        $this->setExpectedException('TestRouterException');
        $r = new TestRouter();
        $r->match('/index');
    }

    public function testRedirect_b() {
        $_SERVER['HTTP_HOST'] = 'local';
        $this->setExpectedException('TestRouterException');
        $r = new TestRouter();
        $r->route('test', 'test/show.php');
        $r->match('/test/show');
    }



    public function testHttpException400_a() {

        $this->setExpectedException('Simph_Router_HttpException', 'Bad Request',
                '400');
        $this->object->match('/_protected');

    }

    public function testHttpException400_b() {

        $this->setExpectedException('Simph_Router_HttpException', 'Bad Request',
                '400');
        $this->object->match('/../protected');

    }

    public function testHttpException400_c() {

        $this->setExpectedException('Simph_Router_HttpException', 'Bad Request',
                '400');
        $this->object->match("\\..\\protected");

    }

    public function testHttpException400_d() {

        $this->setExpectedException('Simph_Router_HttpException', 'Bad Request',
                '400');
        $this->object->match("\\_protected");

    }
    
    public function testHttpException400_e() {

        $this->setExpectedException('Simph_Router_HttpException', 'Bad Request',
                '400');
        
        $this->object->match('');

    }
    
    public function testHttpException400_f() {

        $this->setExpectedException('Simph_Router_HttpException', 'Bad Request',
                '400');
        $this->object->match('dho');

    }



    public function testHttpException404() {

        $this->object->route('/new/location/:id', 'old/location.php');

        // we need an host for this test
        $_SERVER['HTTP_HOST'] = 'local';

        $this->setExpectedException('Simph_Router_HttpException', 'Not Found',
                '404');
        $this->object->match("/old/location");

    }

    public function testPathFor() {
        $r1 = $this->object;
        $r2 = new Simph_Router('index.php');
        $r3 = new Simph_Router('backend.php');

        // Check "home"
        $this->assertEquals($r1->web, $r1->pathFor('home'));
        $this->assertEquals($r2->web, $r2->pathFor('home'));
        $this->assertEquals($r3->web . 'backend.php/', $r3->pathFor('home'));

        $this->assertEquals($r1->web . 'some', $r1->pathFor('some.php'));
        $this->assertEquals($r2->web . 'index.php/some', $r2->pathFor('some.php'));
        $this->assertEquals($r3->web . 'backend.php/some', $r3->pathFor('some.php'));

        $this->assertEquals($r1->web . 'some?a=b',
                $r1->pathFor('some.php', array('a' => 'b')));

        
        $r1->route('/some/:a', 'some.php');
        $this->assertEquals($r1->web . 'some/b',
                $r1->pathFor('some.php', (object) array('a' => 'b')));

        $this->assertEquals($r1->web . 'some/b',
                $r1->pathFor('some.php', new TestArgs));


        $r1->route('/some/(:a)', 'some.php');
        $this->assertEquals($r1->web . 'some/b',
                $r1->pathFor('some.php', new TestArgs));
        $this->assertEquals($r1->web . 'some/',
                $r1->pathFor('some.php'));
        

    }

    /**
     * @todo Implement testUrlFor().
     */
    public function testUrlFor() {

        $this->object->web = '/';

        $_SERVER['HTTP_HOST'] = 'localhost';
        $this->assertEquals('http://localhost/', 
                $this->object->urlFor('home'));

        $_SERVER['HTTP_PORT'] = '80';
        $this->assertEquals('http://localhost:80/', 
                $this->object->urlFor('home'));

        $_SERVER['HTTP_PORT'] = '80';
        $this->assertEquals('//localhost:80/', 
                $this->object->urlFor('home', null, '//'));
    }

}

?>
